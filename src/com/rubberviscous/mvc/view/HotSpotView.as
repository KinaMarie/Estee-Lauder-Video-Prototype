package com.rubberviscous.mvc.view{	import flash.display.*;	import com.rubberviscous.mvc.model.*;	import com.rubberviscous.mvc.controller.*;	import com.rubberviscous.state.*;	import flash.events.*;	import flash.text.*;	import com.greensock.*;	import com.greensock.easing.*;		public class HotSpotView extends ComponentView	{		private var hotSpot:MovieClip;		private var label:TextField;		private var fontOptimaBold:Font;		private var cuepointAction:String;				public function HotSpotView(aModel:IModel, aController:IController = null)		{			super(aModel, aController);			this.model = aModel; 			this.controller = aController;			//addEventListener(Event.ADDED_TO_STAGE, init);			//trace("CuePoint.SEEPRODUCTBEGIN ="+CuePoint.SEEPRODUCTBEGIN)			init();		}				override public function update(event:Event = null):void 		{				trace("HotSpotView update()");			if (model.getApplicationState() == model.HOTSPOT) {				if (model.getCuepointName()==CuePoint.BEGIN) {					cuepointAction = model.getCuepointAction();					label.htmlText = model.getCuepointLabel();					label.y = -label.textHeight/2 +1;					label.x = -label.textWidth/2 - 8;										trace('arrow right ' +hotSpot.mcRightArrow);					hotSpot.mcRightArrow.alpha = 1;					hotSpot.mcRightArrow.y = -label.textHeight/2 +6;					hotSpot.mcRightArrow.x = label.textWidth/2 + 1;											hotSpot.mcBack.width = label.textWidth+ 30;					hotSpot.mcBack.x = -hotSpot.mcBack.width/2;					hotSpot.mcBack.height = label.textHeight+5;					hotSpot.mcBack.y = -hotSpot.mcBack.height/2;					hotSpot.x = model.getCuepointXY().x;					hotSpot.y = model.getCuepointXY().y;					hotSpot.visible = true;					hotSpot.scaleX = hotSpot.scaleY = .5;					hotSpot.alpha = 0;					TweenMax.to(hotSpot, .4, {alpha:1, scaleX:1, scaleY:1, ease:Back.easeInOut})				} else if (model.getCuepointName()==CuePoint.END) {					TweenMax.to(hotSpot, .2, {alpha:0, scaleX:.5, scaleY:.5, ease:Quad.easeInOut, visible:false})				}			}								}				public function init(e:Event=null):void		{			/*mcSeeProduct.scaleX = mcSeeProduct.scaleY = .5;			mcSeeProduct.addEventListener(MouseEvent.CLICK, seeProductHandler);			mcSeeProduct.buttonMode = true;			mcLiuWenBio.scaleX = mcLiuWenBio.scaleY = .5;			mcLiuWenBio.addEventListener(MouseEvent.CLICK, liuWenBioHandler);			mcLiuWenBio.buttonMode = true;			mcWatchVideo.scaleX = mcWatchVideo.scaleY = .5;			mcWatchVideo.addEventListener(MouseEvent.CLICK, watchVideoHandler);			mcWatchVideo.buttonMode = true;*/			hotSpot = new HotSpot();			addChild(hotSpot);						fontOptimaBold = new OptimaBold();						label = new TextField();			label.autoSize = TextFieldAutoSize.LEFT;			label.embedFonts = true;			label.selectable = false;			label.multiline = true;			//label.antiAliasType = AntiAliasType.ADVANCED;            /*label.background = true;            label.border = true;*/            var format:TextFormat = new TextFormat();            format.font = fontOptimaBold.fontName;            format.color = 0x926a2c;            format.size = 14;            //format.underline = true;            label.defaultTextFormat = format;            hotSpot.addChild(label);			hotSpot.visible = false;			hotSpot.alpha = 0;						hotSpot.addEventListener(MouseEvent.CLICK, hotSpotHandler);			hotSpot.mouseChildren = false;			hotSpot.buttonMode = true;		}				private function hotSpotHandler(e:MouseEvent):void		{			//if (cuepointAction != null) {				//trace()						switch (cuepointAction) {				case CuePointActions.MIRROR:					trace("mirror")					controller.setApplicationState(model.MIRROR);					break;				case CuePointActions.RATE_CONCEALER:					trace("rate concealer")					controller.setApplicationState(model.RATING);					break;				case CuePointActions.SHARE:					trace("share")					controller.setApplicationState(model.SHARE);					break;				case CuePointActions.COMMENT:					//trace("rate concealer")					controller.setApplicationState(model.COMMENT);					break;				case CuePointActions.TABVIEW:					controller.setApplicationState(model.TABVIEW);					break;				case CuePointActions.INFO_LIUWEN:					//trace("rate concealer")					controller.setApplicationState(model.INFOHOTSPOT);					break;				case CuePointActions.INFO_PRODUCTS:					//trace("rate concealer")					controller.setApplicationState(model.PRODUCTHOTSPOT);					break;				case CuePointActions.VIDEO_RUNWAYLOOK:					TweenMax.to(hotSpot, .2, {alpha:0, scaleX:.5, scaleY:.5, ease:Quad.easeInOut, visible:false})					controller.setVideoURL("videos/EsteeDLShow_FINAL.f4v");					controller.setVideoView("Video2View");					//controller.setVideoStatus(VideoState.IDLE);					controller.setApplicationState(model.VIDEOHOTSPOT);					break;				case CuePointActions.VIDEO_TOMPECHEUX:					TweenMax.to(hotSpot, .2, {alpha:0, scaleX:.5, scaleY:.5, ease:Quad.easeInOut, visible:false})					controller.setVideoURL("videos/EL_Pecheux_FINAL_h264.f4v");					controller.setVideoView("Video2View");					//controller.setVideoStatus(VideoState.IDLE);					controller.setApplicationState(model.VIDEOHOTSPOT);					break;				case CuePointActions.VIDEO_MAKEUPTEST:					TweenMax.to(hotSpot, .2, {alpha:0, scaleX:.5, scaleY:.5, ease:Quad.easeInOut, visible:false})					controller.setVideoURL("videos/Makeup Test_FINAL.f4v");					controller.setVideoView("Video2View");					//controller.setVideoStatus(VideoState.IDLE);					controller.setApplicationState(model.VIDEOHOTSPOT);					break;			}			//}		}				private function seeProductHandler(e:MouseEvent):void		{			//controller.setApplicationState(model.PRODUCTHOTSPOT);		}				private function watchVideoHandler(e:MouseEvent):void		{			/*controller.setVideoURL("videos/EsteeDLShow_FINAL.f4v");			controller.setVideoView("Video2View");			controller.setVideoStatus(VideoState.IDLE);			controller.setApplicationState(model.VIDEOHOTSPOT);			TweenMax.to(mcWatchVideo, .3, {alpha:0, scaleX:.5, scaleY:.5, ease:Quad.easeInOut, visible:false})*/		}				private function liuWenBioHandler(e:MouseEvent):void		{			controller.setApplicationState(model.INFOHOTSPOT);		}				public function transitionIn():void		{		}				public function transitionOut():void		{		}	}}